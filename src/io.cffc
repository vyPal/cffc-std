package std;

export extern vararg func printf(fmt: *i8): i32;
extern func strcat(dest: *i8, src: *i8): *i8;
extern func malloc(size: i64): *i8;
extern func strlen(s: *i8): i64;
extern func scanf(format: *i8, buffer: *i8): i32;
export extern vararg func sprintf(str: *i8, format: *i8): i32;

export func print(format: *i8) {
  printf(format);
}

export func println(format: *i8) {
  printf(format);
  printf("\n");
}

export func input(prompt: *i8): *i8 {
  var buffer: *i8 = malloc(256);
  printf(prompt);
  scanf("%255s", buffer);
  return buffer;
}

export func concat(s1: *i8, s2: *i8): *i8 {
  var len1: i64 = strlen(s1);
  var len2: i64 = strlen(s2);
  var result: *i8 = malloc(len1 + len2 + 1);
  strcat(result, s1);
  strcat(result, s2);
  return result;
}

export func i32ToString(value: i32): *i8 {
  var buffer: *i8 = malloc(12); // Enough for a 32-bit integer
  sprintf(buffer, "%d", value);
  return buffer;
}

export func i64ToString(value: i64): *i8 {
  var buffer: *i8 = malloc(21); // Enough for a 64-bit integer
  sprintf(buffer, "%lld", value);
  return buffer;
}

export func u32ToString(value: u32): *i8 {
  var buffer: *i8 = malloc(12); // Enough for a 32-bit unsigned integer
  sprintf(buffer, "%u", value);
  return buffer;
}

export func f32ToString(value: f32): *i8 {
  var buffer: *i8 = malloc(32); // Enough for a 32-bit floating point number
  sprintf(buffer, "%f", value);
  return buffer;
}